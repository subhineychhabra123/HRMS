//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMPMGMT.Repository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ActionItemComment> ActionItemComment { get; set; }
        public DbSet<ActionItemResponsible> ActionItemResponsible { get; set; }
        public DbSet<Candidate> Candidate { get; set; }
        public DbSet<Category> Category { get; set; }
        public DbSet<ClientDetail> ClientDetail { get; set; }
        public DbSet<Comments> Comments { get; set; }
        public DbSet<Company> Company { get; set; }
        public DbSet<Country> Country { get; set; }
        public DbSet<Designation> Designation { get; set; }
        public DbSet<ELMAH_Error> ELMAH_Error { get; set; }
        public DbSet<EmployeeSkill> EmployeeSkill { get; set; }
        public DbSet<Group> Group { get; set; }
        public DbSet<InterviewDetail> InterviewDetail { get; set; }
        public DbSet<InterviewDetailSkill> InterviewDetailSkill { get; set; }
        public DbSet<Module> Module { get; set; }
        public DbSet<ModulePermission> ModulePermission { get; set; }
        public DbSet<OrganizationUnit> OrganizationUnit { get; set; }
        public DbSet<Permission> Permission { get; set; }
        public DbSet<ProfilePermission> ProfilePermission { get; set; }
        public DbSet<ProjectClientDetail> ProjectClientDetail { get; set; }
        public DbSet<ProjectGroup> ProjectGroup { get; set; }
        public DbSet<Referrer> Referrer { get; set; }
        public DbSet<Skill> Skill { get; set; }
        public DbSet<State> State { get; set; }
        public DbSet<Status> Status { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Technology> Technology { get; set; }
        public DbSet<UserGroup> UserGroup { get; set; }
        public DbSet<Attachment> Attachment { get; set; }
        public DbSet<Employee> Employee { get; set; }
        public DbSet<Profile> Profile { get; set; }
        public DbSet<Project> Project { get; set; }
        public DbSet<Resources> Resources { get; set; }
        public DbSet<ActionList> ActionList { get; set; }
        public DbSet<FileAttachments> FileAttachments { get; set; }
        public DbSet<ActionItem> ActionItem { get; set; }
        public DbSet<TimeSheet> TimeSheet { get; set; }
    
        [EdmFunction("Entities", "GetActionItemsCalculatedData")]
        public virtual IQueryable<GetActionItemsCalculatedData_Result> GetActionItemsCalculatedData(Nullable<int> actionListId, Nullable<int> parentActionItemId)
        {
            var actionListIdParameter = actionListId.HasValue ?
                new ObjectParameter("ActionListId", actionListId) :
                new ObjectParameter("ActionListId", typeof(int));
    
            var parentActionItemIdParameter = parentActionItemId.HasValue ?
                new ObjectParameter("ParentActionItemId", parentActionItemId) :
                new ObjectParameter("ParentActionItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetActionItemsCalculatedData_Result>("[Entities].[GetActionItemsCalculatedData](@ActionListId, @ParentActionItemId)", actionListIdParameter, parentActionItemIdParameter);
        }
    
        public virtual int SSP_DeleteActionItem(Nullable<int> actionItemId)
        {
            var actionItemIdParameter = actionItemId.HasValue ?
                new ObjectParameter("ActionItemId", actionItemId) :
                new ObjectParameter("ActionItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_DeleteActionItem", actionItemIdParameter);
        }
    
        public virtual ObjectResult<SSP_GetActionItemDescription_Result> SSP_GetActionItemDescription(Nullable<int> actionItemId)
        {
            var actionItemIdParameter = actionItemId.HasValue ?
                new ObjectParameter("ActionItemId", actionItemId) :
                new ObjectParameter("ActionItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetActionItemDescription_Result>("SSP_GetActionItemDescription", actionItemIdParameter);
        }
    
        public virtual int SSP_GetActionItemsArchivedFromActionListId(Nullable<int> actionListId, Nullable<bool> isArchived)
        {
            var actionListIdParameter = actionListId.HasValue ?
                new ObjectParameter("ActionListId", actionListId) :
                new ObjectParameter("ActionListId", typeof(int));
    
            var isArchivedParameter = isArchived.HasValue ?
                new ObjectParameter("IsArchived", isArchived) :
                new ObjectParameter("IsArchived", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_GetActionItemsArchivedFromActionListId", actionListIdParameter, isArchivedParameter);
        }
    
        public virtual ObjectResult<SSP_GetActionItemsFromActionId_Result> SSP_GetActionItemsFromActionId(Nullable<int> actionListId, Nullable<bool> onTime, Nullable<bool> overDue, Nullable<bool> beforeDue, string searchKey)
        {
            var actionListIdParameter = actionListId.HasValue ?
                new ObjectParameter("ActionListId", actionListId) :
                new ObjectParameter("ActionListId", typeof(int));
    
            var onTimeParameter = onTime.HasValue ?
                new ObjectParameter("OnTime", onTime) :
                new ObjectParameter("OnTime", typeof(bool));
    
            var overDueParameter = overDue.HasValue ?
                new ObjectParameter("OverDue", overDue) :
                new ObjectParameter("OverDue", typeof(bool));
    
            var beforeDueParameter = beforeDue.HasValue ?
                new ObjectParameter("BeforeDue", beforeDue) :
                new ObjectParameter("BeforeDue", typeof(bool));
    
            var searchKeyParameter = searchKey != null ?
                new ObjectParameter("SearchKey", searchKey) :
                new ObjectParameter("SearchKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetActionItemsFromActionId_Result>("SSP_GetActionItemsFromActionId", actionListIdParameter, onTimeParameter, overDueParameter, beforeDueParameter, searchKeyParameter);
        }
    
        public virtual int SSP_GetActionItemStatus(Nullable<int> actionItemId, ObjectParameter actionItemStatus)
        {
            var actionItemIdParameter = actionItemId.HasValue ?
                new ObjectParameter("ActionItemId", actionItemId) :
                new ObjectParameter("ActionItemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_GetActionItemStatus", actionItemIdParameter, actionItemStatus);
        }
    
        public virtual ObjectResult<SSP_GetOrganizationAutocomplete_Result> SSP_GetOrganizationAutocomplete(Nullable<int> companyId, Nullable<int> orgUnitId, string searchString)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var orgUnitIdParameter = orgUnitId.HasValue ?
                new ObjectParameter("OrgUnitId", orgUnitId) :
                new ObjectParameter("OrgUnitId", typeof(int));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("searchString", searchString) :
                new ObjectParameter("searchString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetOrganizationAutocomplete_Result>("SSP_GetOrganizationAutocomplete", companyIdParameter, orgUnitIdParameter, searchStringParameter);
        }
    
        public virtual int SSP_GetResponsiblesForAutoComplete(Nullable<int> goalId, Nullable<int> companyId, string query)
        {
            var goalIdParameter = goalId.HasValue ?
                new ObjectParameter("GoalId", goalId) :
                new ObjectParameter("GoalId", typeof(int));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_GetResponsiblesForAutoComplete", goalIdParameter, companyIdParameter, queryParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SSP_MainMenuConfigurationCheck(Nullable<int> profileId)
        {
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SSP_MainMenuConfigurationCheck", profileIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SSP_MainMenuManageMetricDashboardCheck(Nullable<int> profileId)
        {
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SSP_MainMenuManageMetricDashboardCheck", profileIdParameter);
        }
    
        public virtual int SSP_UserDefaultData(string orgUnitName, Nullable<int> companyId, Nullable<int> profileId)
        {
            var orgUnitNameParameter = orgUnitName != null ?
                new ObjectParameter("OrgUnitName", orgUnitName) :
                new ObjectParameter("OrgUnitName", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var profileIdParameter = profileId.HasValue ?
                new ObjectParameter("ProfileId", profileId) :
                new ObjectParameter("ProfileId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SSP_UserDefaultData", orgUnitNameParameter, companyIdParameter, profileIdParameter);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorsXml(string application, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorsXml", applicationParameter, pageIndexParameter, pageSizeParameter, totalCount);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorXml(string application, Nullable<System.Guid> errorId)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorXml", applicationParameter, errorIdParameter);
        }
    
        public virtual int ELMAH_LogError(Nullable<System.Guid> errorId, string application, string host, string type, string source, string message, string user, string allXml, Nullable<int> statusCode, Nullable<System.DateTime> timeUtc)
        {
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var allXmlParameter = allXml != null ?
                new ObjectParameter("AllXml", allXml) :
                new ObjectParameter("AllXml", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var timeUtcParameter = timeUtc.HasValue ?
                new ObjectParameter("TimeUtc", timeUtc) :
                new ObjectParameter("TimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELMAH_LogError", errorIdParameter, applicationParameter, hostParameter, typeParameter, sourceParameter, messageParameter, userParameter, allXmlParameter, statusCodeParameter, timeUtcParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SSP_GetRefferrerForAutoComplete_Result> SSP_GetRefferrerForAutoComplete(string query)
        {
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetRefferrerForAutoComplete_Result>("SSP_GetRefferrerForAutoComplete", queryParameter);
        }
    
        public virtual ObjectResult<Referrer> Function_SSP_GetRefferrerForAutoComplete(string query)
        {
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Referrer>("Function_SSP_GetRefferrerForAutoComplete", queryParameter);
        }
    
        public virtual ObjectResult<Referrer> Function_SSP_GetRefferrerForAutoComplete(string query, MergeOption mergeOption)
        {
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Referrer>("Function_SSP_GetRefferrerForAutoComplete", mergeOption, queryParameter);
        }

        public virtual ObjectResult<SSP_GetActionItemsFromActionListId_Result> SSP_GetActionItemsFromActionListId(Nullable<int> actionListId, Nullable<bool> onTime, Nullable<bool> overDue, Nullable<bool> beforeDue, string searchKey, Nullable<DateTime> startDate, Nullable<DateTime> dueDate, Nullable<int> statusDrop, Nullable<int> responsibleUserId) //, Nullable<int> userId
        {
            var actionListIdParameter = actionListId.HasValue ?
                new ObjectParameter("ActionListId", actionListId) :
                new ObjectParameter("ActionListId", typeof(int));
    
            var onTimeParameter = onTime.HasValue ?
                new ObjectParameter("OnTime", onTime) :
                new ObjectParameter("OnTime", typeof(bool));
    
            var overDueParameter = overDue.HasValue ?
                new ObjectParameter("OverDue", overDue) :
                new ObjectParameter("OverDue", typeof(bool));
    
            var beforeDueParameter = beforeDue.HasValue ?
                new ObjectParameter("BeforeDue", beforeDue) :
                new ObjectParameter("BeforeDue", typeof(bool));
    
            var searchKeyParameter = searchKey != null ?
                new ObjectParameter("SearchKey", searchKey) :
                new ObjectParameter("SearchKey", typeof(string));
            var startDateParameter= startDate.HasValue?
                    new ObjectParameter("StartDate", startDate) :
                    new ObjectParameter("StartDate", typeof(DateTime));
             var dueDateParameter= dueDate.HasValue?
                    new ObjectParameter("DueDate", dueDate) :
                    new ObjectParameter("DueDate", typeof(DateTime));
              var statusDropParameter= statusDrop.HasValue?
                    new ObjectParameter("StatusDrop", statusDrop) :
                    new ObjectParameter("StatusDrop", typeof(int));
             var responsibleUserIdParameter= responsibleUserId.HasValue?
                    new ObjectParameter("ResponsibleUserId", responsibleUserId) :
                    new ObjectParameter("ResponsibleUserId", typeof(int));
            // var userIdParameter = userId.HasValue ? new ObjectParameter("UserId", userId) :    new ObjectParameter("UserId", typeof(int));


             return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetActionItemsFromActionListId_Result>("SSP_GetActionItemsFromActionListId", actionListIdParameter, onTimeParameter, overDueParameter, beforeDueParameter, searchKeyParameter, startDateParameter, dueDateParameter, statusDropParameter, responsibleUserIdParameter); //, userIdParameter
        }
    
        public virtual ObjectResult<ssp_GetMonthTimeSheet_Result> ssp_GetMonthTimeSheet(string month, Nullable<int> year, Nullable<int> userID)
        {
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetMonthTimeSheet_Result>("ssp_GetMonthTimeSheet", monthParameter, yearParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SSP_GetMonthYearTimeSheet_Result> SSP_GetMonthYearTimeSheet(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetMonthYearTimeSheet_Result>("SSP_GetMonthYearTimeSheet", userIdParameter);
        }
    
        public virtual ObjectResult<ssp_GetActionItemDateTimeSheet_Result> ssp_GetActionItemDateTimeSheet(Nullable<int> date, string month, Nullable<int> year, Nullable<int> userID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(int));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetActionItemDateTimeSheet_Result>("ssp_GetActionItemDateTimeSheet", dateParameter, monthParameter, yearParameter, userIDParameter);
        }

        public virtual ObjectResult<SSP_GetEmployeeWorkHours_Result> SSP_GetEmployeeWorkHours(Nullable<int> userID) //, string firstName, string lastName, string fullName, Nullable<DateTime> dateOfJoining, Nullable<int> totalWorkHours
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetEmployeeWorkHours_Result>("SSP_GetEmployeeWorkHours", userIDParameter);
        }



        public virtual ObjectResult<SSP_GetActionItemsforDropdwonforProjectId_Result> SSP_GetActionItemsforDropdwonforProjectId(Nullable<int> projectId, Nullable<int> userId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));

            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetActionItemsforDropdwonforProjectId_Result>("SSP_GetActionItemsforDropdwonforProjectId", projectIdParameter, userIdParameter);
        }


        public virtual ObjectResult<SSP_GetProjectListDetails_Result> SSP_GetProjectListDetails(string searchText, Nullable<int> userId, Nullable<int> currentPage, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));

            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
            var currentPageParameter = currentPage.HasValue ?
               new ObjectParameter("CurrentPage", currentPage) :
               new ObjectParameter("CurrentPage", typeof(int));
            var pageSizeParameter = pageSize.HasValue ?
              new ObjectParameter("PageSize", pageSize) :
              new ObjectParameter("PageSize", typeof(int));

            var sortColumnParameter = sortColumn != null ?
              new ObjectParameter("SortColumn", sortColumn) :
              new ObjectParameter("SortColumn", typeof(string));
            var sortOrderParameter = sortOrder != null ?
              new ObjectParameter("SortOrder", sortOrder) :
              new ObjectParameter("SortOrder", typeof(string));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetProjectListDetails_Result>("SSP_GetProjectListDetails", searchTextParameter, userIdParameter, currentPageParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }



        public virtual ObjectResult<SSP_GetProjectWorkHours_Result> SSP_GetProjectWorkHours(Nullable<int> projectId)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetProjectWorkHours_Result>("SSP_GetProjectWorkHours", projectIdParameter);
        }



        public virtual ObjectResult<SSP_GetActionListDetails_Result> SSP_GetActionListsDetails(Nullable<int> projectId, string searchText, Nullable<int> userId, Nullable<int> currentPage, Nullable<int> pageSize, string sortColumn, string sortOrder)
        {
            var projectIdParameter = projectId.HasValue ?
              new ObjectParameter("ProjectId", projectId) :
              new ObjectParameter("ProjectId", typeof(int));
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));

            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
            var currentPageParameter = currentPage.HasValue ?
               new ObjectParameter("CurrentPage", currentPage) :
               new ObjectParameter("CurrentPage", typeof(int));
            var pageSizeParameter = pageSize.HasValue ?
              new ObjectParameter("PageSize", pageSize) :
              new ObjectParameter("PageSize", typeof(int));

            var sortColumnParameter = sortColumn != null ?
              new ObjectParameter("SortColumn", sortColumn) :
              new ObjectParameter("SortColumn", typeof(string));
            var sortOrderParameter = sortOrder != null ?
              new ObjectParameter("SortOrder", sortOrder) :
              new ObjectParameter("SortOrder", typeof(string));
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetActionListDetails_Result>("SSP_GetActionListDetails", projectIdParameter, searchTextParameter, userIdParameter, currentPageParameter, pageSizeParameter, sortColumnParameter, sortOrderParameter);
        }



        // For Testing Only
        public virtual ObjectResult<SSP_GetActionItemsFromActionListId_Mtest_Result> SSP_GetActionItemsFromActionListId_Test(Nullable<int> actionListId, Nullable<bool> onTime, Nullable<bool> overDue, Nullable<bool> beforeDue, string searchKey, Nullable<DateTime> startDate, Nullable<DateTime> dueDate, Nullable<int> statusDrop, Nullable<int> responsibleUserId) //, Nullable<int> userId
        {
            var actionListIdParameter = actionListId.HasValue ?
                new ObjectParameter("ActionListId", actionListId) :
                new ObjectParameter("ActionListId", typeof(int));

            var onTimeParameter = onTime.HasValue ?
                new ObjectParameter("OnTime", onTime) :
                new ObjectParameter("OnTime", typeof(bool));

            var overDueParameter = overDue.HasValue ?
                new ObjectParameter("OverDue", overDue) :
                new ObjectParameter("OverDue", typeof(bool));

            var beforeDueParameter = beforeDue.HasValue ?
                new ObjectParameter("BeforeDue", beforeDue) :
                new ObjectParameter("BeforeDue", typeof(bool));

            var searchKeyParameter = searchKey != null ?
                new ObjectParameter("SearchKey", searchKey) :
                new ObjectParameter("SearchKey", typeof(string));
            var startDateParameter = startDate.HasValue ?
                    new ObjectParameter("StartDate", startDate) :
                    new ObjectParameter("StartDate", typeof(DateTime));
            var dueDateParameter = dueDate.HasValue ?
                   new ObjectParameter("DueDate", dueDate) :
                   new ObjectParameter("DueDate", typeof(DateTime));
            var statusDropParameter = statusDrop.HasValue ?
                  new ObjectParameter("StatusDrop", statusDrop) :
                  new ObjectParameter("StatusDrop", typeof(int));
            var responsibleUserIdParameter = responsibleUserId.HasValue ?
                   new ObjectParameter("ResponsibleUserId", responsibleUserId) :
                   new ObjectParameter("ResponsibleUserId", typeof(int));
            // var userIdParameter = userId.HasValue ? new ObjectParameter("UserId", userId) :    new ObjectParameter("UserId", typeof(int));


            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSP_GetActionItemsFromActionListId_Mtest_Result>("SSP_GetActionItemsFromActionListId_Mtest", actionListIdParameter, onTimeParameter, overDueParameter, beforeDueParameter, searchKeyParameter, startDateParameter, dueDateParameter, statusDropParameter, responsibleUserIdParameter); //, userIdParameter
        }
    
    }
}
